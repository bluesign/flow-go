// Code generated by mockery v2.12.1. DO NOT EDIT.

package mock

import (
	execution "github.com/onflow/flow-go/engine/execution"
	flow "github.com/onflow/flow-go/model/flow"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// ComputationResults is an autogenerated mock type for the ComputationResults type
type ComputationResults struct {
	mock.Mock
}

// ByID provides a mock function with given fields: computationResultID
func (_m *ComputationResults) ByID(computationResultID flow.Identifier) (*execution.ComputationResult, error) {
	ret := _m.Called(computationResultID)

	var r0 *execution.ComputationResult
	if rf, ok := ret.Get(0).(func(flow.Identifier) *execution.ComputationResult); ok {
		r0 = rf(computationResultID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*execution.ComputationResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(computationResultID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllIDs provides a mock function with given fields:
func (_m *ComputationResults) GetAllIDs() ([]flow.Identifier, error) {
	ret := _m.Called()

	var r0 []flow.Identifier
	if rf, ok := ret.Get(0).(func() []flow.Identifier); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]flow.Identifier)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: computationResultID
func (_m *ComputationResults) Remove(computationResultID flow.Identifier) error {
	ret := _m.Called(computationResultID)

	var r0 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) error); ok {
		r0 = rf(computationResultID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Store provides a mock function with given fields: computationResultID, computationResult
func (_m *ComputationResults) Store(computationResultID flow.Identifier, computationResult *execution.ComputationResult) error {
	ret := _m.Called(computationResultID, computationResult)

	var r0 error
	if rf, ok := ret.Get(0).(func(flow.Identifier, *execution.ComputationResult) error); ok {
		r0 = rf(computationResultID, computationResult)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewComputationResults creates a new instance of ComputationResults. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewComputationResults(t testing.TB) *ComputationResults {
	mock := &ComputationResults{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
